1) Transaction number lock

Started transaction holds own number lock

BEGIN;
SELECT pg_backend_pid();

SELECT locktype, virtualxid, transactionid, mode, granted
FROM pg_locks WHERE pid = 56;

locktype - virtualxid
virtualxid - 5/44
mode - ExclusiveLock
granted - true

when transaction receives a number lock added

SELECT pg_current_xact_id();

locktype - transactionid		
virtualxid - null 
transactionid - 918	
mode - ExclusiveLock	
granted - true


2) Relation locks

CREATE VIEW locks AS
SELECT pid,
locktype,
CASE locktype
WHEN 'relation' THEN relation::regclass::text
WHEN 'transactionid' THEN transactionid::text
WHEN 'virtualxid' THEN virtualxid
END AS lockid,
mode,
granted
FROM pg_locks
ORDER BY 1, 2, 3;


begin;
SELECT pg_backend_pid();
update bookings 
set total_amount = total_amount + 100
where book_ref = '00000F'

select * from locks where pid = 64;

There is 
- tran number + virtual locks;
- RowExclusiveLock for table bookings;
- RowExclusiveLock for all indexes (booking_ref, bookings_pkey, bookings_total_amount);


3) Waiting Queue


begin;
SELECT pg_backend_pid();
update bookings 
set total_amount = total_amount + 100
where book_ref = '00000F';

There is 
- tran number + virtual locks;
- RowExclusiveLock for table bookings;
- RowExclusiveLock for all indexes (booking_ref, bookings_pkey, bookings_total_amount);



begin;
CREATE INDEX ON bookings(book_date);

There is 
- virtualxid exclusive lock 
- relation bookings ShareLock Granted false

VACUUM FULL bookings;

There is 
- tran number + virtual locks;
- relation AccessExclusiveLock Granted false



SELECT pid,
pg_blocking_pids(pid),
wait_event_type,
state,
left(query,50) AS query
FROM pg_stat_activity
where pid IN (494, 496, 490);


4) Row Exclusive Locks

CREATE EXTENSION pageinspect;
CREATE FUNCTION row_locks(relname text, pageno integer)
RETURNS TABLE(
ctid tid, xmax text,
lock_only text, is_multi text,
keys_upd text, keyshr text, shr text
) AS $$
SELECT (pageno,lp)::text::tid,
t_xmax,
CASE WHEN t_infomask & 128 = 128 THEN 't' END,
CASE WHEN t_infomask & 4096 = 4096 THEN 't' END,
CASE WHEN t_infomask2 & 8192 = 8192 THEN 't' END,
CASE WHEN t_infomask & 16 = 16 THEN 't' END,
CASE WHEN t_infomask & 16+64 = 16+64 THEN 't' END
FROM heap_page_items(get_raw_page(relname,pageno))
ORDER BY lp;
$$ LANGUAGE sql;

BEGIN;
update bookings set total_amount = total_amount + 100 where book_ref = '000012';

SELECT * FROM row_locks('bookings',0) limit 2

version (0,1)	with xmax 936 


5) Row share Locks

BEGIN;
SELECT * FROM bookings WHERE book_ref = '000012' FOR NO KEY UPDATE;

Locks the row for all update operations, except updating keys and indexes, allow selects;

BEGIN;
SELECT * FROM bookings WHERE book_ref = '00002D' FOR UPDATE;

Locks the row for all update operations, event selects?;

BEGIN;
SELECT * FROM bookings WHERE book_ref = '00002D' FOR SHARE;

allows selecting rows, but lock updating?

BEGIN;
SELECT * FROM bookings WHERE book_ref = '00002D' FOR KEY SHARE;

version - (0,1), xmax - 938, lock_only = t,
version - (0,2), xmax - 938, lock_only = t, key_upd = t
lock_only - xmax_lock_only additional informational bit;




RowExclusiveLock - lock row (INSERT, UPDATE, DELETE);
AccessExclusiveLock - lock whole table (also lock RowExclusiveLock, ShareLock) (VACUUM FULL);
ShareLock - temporal row lock might occur, which can affect perfomance (CREATE INDEX);
RowShareLock - (SELECT FOR NO KEY UPDATE, SELECT FOR UPDATE, SELECT FOR SHARE)




CREATE INDEX executes full table scan within index build.
