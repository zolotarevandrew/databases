1) Using primary key index
explain (analyze, buffers) select * from bookings where book_ref = '00000F';

Index Scan using bookings_pkey on bookings  (cost=0.42..8.44 rows=1 width=21) (actual time=0.658..0.659 rows=1 loops=1)
  Index Cond: (book_ref = '00000F'::bpchar)
  Buffers: shared hit=1 read=3
Planning:
  Buffers: shared hit=8 read=1
Planning Time: 0.125 ms
Execution Time: 0.671 ms


2) Using Primary key index with multiple columns
explain (analyze, buffers) select * from bookings where book_ref in(
'00000F',
'000012',
'00002D',
'000068',
'0000C9'
)

Index Scan using bookings_pkey on bookings  (cost=0.42..26.21 rows=5 width=21) (actual time=0.019..0.029 rows=5 loops=1)
  Index Cond: (book_ref = ANY ('{00000F,000012,00002D,000068,0000C9}'::bpchar[]))
  Buffers: shared hit=19
Planning:
  Buffers: shared hit=16 dirtied=3
Planning Time: 0.080 ms
Execution Time: 0.037 ms


explain (analyze, buffers) select * from bookings 
where book_ref = ANY ('{00000F,000012,00002D,000068,0000C9}'::bpchar[])

Index Scan using bookings_pkey on bookings  (cost=0.42..26.21 rows=5 width=21) (actual time=0.030..0.042 rows=5 loops=1)
  Index Cond: (book_ref = ANY ('{00000F,000012,00002D,000068,0000C9}'::bpchar[]))
  Buffers: shared hit=16
Planning Time: 0.093 ms
Execution Time: 0.069 ms



4) Primary key index with filtering

explain (analyze, buffers) select * from bookings 
where book_ref = ANY ('{00000F,000012,00002D,000068,0000C9}'::bpchar[])
and total_amount = 37900.00

Index Scan using bookings_pkey on bookings  (cost=0.42..26.23 rows=1 width=21) (actual time=0.022..0.034 rows=1 loops=1)
  Index Cond: (book_ref = ANY ('{00000F,000012,00002D,000068,0000C9}'::bpchar[]))
  Filter: (total_amount = 37900.00)
  Rows Removed by Filter: 4
  Buffers: shared hit=16
Planning:
  Buffers: shared hit=6
Planning Time: 0.113 ms
Execution Time: 0.044 ms


5) Index created with filtering condition

create index flights_scheduled_idx on flights(flight_id)
where status = 'Scheduled';

explain (analyze, buffers) select * from flights
where status = 'Scheduled'

Index Scan using flights_scheduled_idx on flights  (cost=0.29..608.13 rows=15234 width=63) (actual time=0.017..3.320 rows=15383 loops=1)
  Buffers: shared hit=841 read=44
Planning:
  Buffers: shared hit=16 read=1
Planning Time: 0.161 ms
Execution Time: 3.812 ms


explain (analyze, buffers) select * from flights
where status = 'Scheduled' and scheduled_departure > '2017-09-01 13:20:00.000 +0300'

Index Scan using flights_scheduled_idx on flights  (cost=0.29..646.21 rows=1718 width=63) (actual time=0.018..2.913 rows=6921 loops=1)
  Filter: (scheduled_departure > '2017-09-01 13:20:00+03'::timestamp with time zone)
  Rows Removed by Filter: 8462
  Buffers: shared hit=885
Planning Time: 0.065 ms
Execution Time: 3.095 ms

When to use filtered indexes
- High Selectivity
- Frequent Queries on Filtered Condition
- Selective Additional Filtering

Index with filtering
If the column used in the filtered condition (status in this example) is frequently updated, 
it can lead to increased maintenance overhead for the index.

6) Ordering by index

explain (analyze, buffers)  select * from flights order by flight_no desc

Index Scan Backward using flights_no_status_idx on flights  (cost=0.29..4559.72 rows=65664 width=63) (actual time=0.027..7.649 rows=65664 loops=1)
  Buffers: shared hit=3979
Planning Time: 0.043 ms
Execution Time: 9.195 ms

With a B-tree index on created_at, PostgreSQL can efficiently retrieve results in order without additional sorting.


Use cases
- High Selectivity (Filtering a Small Subset of Rows) + 
- Range Queries + 
- Matching Expressions in Function-based Indexes + 
- Order By Clauses That Match Index Order +
- Covering Index (Index-Only Scan) 
- Multi-Column Index with Conditions on Multiple Columns +
- Partial Indexes + 





