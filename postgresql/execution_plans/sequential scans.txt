1) explain (analyze, buffers) select * from aircrafts_data
Seq Scan on bookings.aircrafts_data  (cost=0.00..1.09 rows=9 width=52) (actual time=0.022..0.023 rows=9 loops=1)
  Output: aircraft_code, model, range
  Buffers: shared hit=1
Planning Time: 0.054 ms
Execution Time: 0.031 ms


2) explain (analyze, buffers) select * from airports_data
Seq Scan on bookings.airports_data  (cost=0.00..4.04 rows=104 width=145) (actual time=0.007..0.016 rows=104 loops=1)
  Output: airport_code, airport_name, city, coordinates, timezone
  Buffers: shared hit=3
Planning Time: 0.056 ms
Seq Scan on bookings.airports_data  (cost=0.00..4.04 rows=104 width=145) (actual time=0.007..0.016 rows=104 loops=1)


3) explain (analyze, buffers) select * from boarding_passes
Seq Scan on bookings.boarding_passes  (cost=0.00..32894.95 rows=1894295 width=25) (actual time=0.132..123.562 rows=1894295 loops=1)Seq Scan on bookings.boarding_passes  (cost=0.00..32894.95 rows=1894295 width=25) (actual time=0.132..123.562 rows=1894295 loops=1)
  Buffers: shared hit=32 read=13920
Planning Time: 0.031 ms
Execution Time: 170.704 ms

  
4) explain (analyze, buffers) select * from bookings
Seq Scan on bookings  (cost=0.00..9758.33 rows=593433 width=21) (actual time=0.007..40.207 rows=593433 loops=1)Seq Scan on bookings  (cost=0.00..9758.33 rows=593433 width=21) (actual time=0.007..40.207 rows=593433 loops=1)
  Buffers: shared hit=3824
Planning Time: 0.031 ms
Execution Time: 56.289 ms


5) explain (analyze, verbose, buffers) select * from companies
Seq Scan on public.companies  (cost=0.00..269993.37 rows=3781737 width=570) (actual time=0.146..2602.562 rows=3775674 loops=1)
  Buffers: shared hit=1384 read=230792
  I/O Timings: read=595.455
Planning Time: 0.181 ms
Execution Time: 2769.368 ms

I/O Timings - on reading data from disk for this query.

6) explain (analyze, verbose, buffers) select * from companies
where created  > '2023-11-01 00:00:00'

Seq Scan on public.companies  (cost=0.00..279447.71 rows=1188407 width=570) (actual time=0.075..1509.654 rows=1179841 loops=1)

  Filter: (companies.created > '2023-11-01 00:00:00'::timestamp without time zone)
  Rows Removed by Filter: 2595833
  Buffers: shared hit=1418 read=230758
  I/O Timings: read=527.560
Planning Time: 0.290 ms
Execution Time: 1560.010 ms

Filter just removed rows but is has scanned all 3781737 rows again.

7) explain (analyze, buffers) select * from companies limit 100
Limit  (cost=0.00..7.14 rows=100 width=570) (actual time=0.061..0.153 rows=100 loops=1)
  Buffers: shared read=5
  I/O Timings: read=0.021
  ->  Seq Scan on companies  (cost=0.00..269993.37 rows=3781737 width=570) (actual time=0.053..0.137 rows=100 loops=1)
        Buffers: shared read=5
        I/O Timings: read=0.021
Planning Time: 0.181 ms
Execution Time: 0.268 ms

8) explain (analyze, buffers) select * from companies offset 3000000 limit 100
Limit  (cost=214182.03..214189.17 rows=100 width=570) (actual time=2345.484..2345.544 rows=100 loops=1)
  Buffers: shared hit=1230 read=198940
  I/O Timings: read=709.029
  ->  Seq Scan on companies  (cost=0.00..269993.37 rows=3781737 width=570) (actual time=0.014..2218.838 rows=3000100 loops=1)
        Buffers: shared hit=1230 read=198940
        I/O Timings: read=709.029
Planning Time: 0.329 ms
Execution Time: 2345.620 ms

scanned all table 3000000 

Sequential scan cost
- Table Size, Larger tables have higher costs for sequential scans because more pages need to be read from disk or memory;
- Page fetch cost, 
seq_page_cost: cost of fetching a page during a sequential scan. By default, seq_page_cost is typically set to 1.0;
random_page_cost: affects the cost estimation for index scans and other random access operations;

Use cases
- Small tables;
- large portion of rows 5-10% percent has to be read;
- lack of index;

